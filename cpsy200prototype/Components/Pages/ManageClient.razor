@page "/manageClient"
@using NPOI.XSSF.UserModel
@using NPOI.SS.UserModel
@using System.IO

<h3>Manage Clients</h3>

<div>
    <div class="AddClients">
        <div>
            <h4>Add Client</h4>
        </div>
        <div>
            <input type="text" @bind="newClient.ClientId" placeholder="Client ID" />
            <input type="text" @bind="newClient.LastName" placeholder="Last Name" />
            <input type="text" @bind="newClient.FirstName" placeholder="First Name" />
            <input type="text" @bind="newClient.Phone" placeholder="Contact Phone" />
            <input type="text" @bind="newClient.Email" placeholder="Email" />
            <button @onclick="() => AddClient(newClient)">Add Client</button>
        </div>
    </div>
    <br />

    <div class="UpdateClient">
        <div>
            <h4>Update Client</h4>
        </div>
        <div>
            <input type="text" @bind="updateClientId" placeholder="Client ID" />
            <input type="text" @bind="updatePhone" placeholder="Contact Phone" />
            <input type="text" @bind="updateEmail" placeholder="Email" />
            <button @onclick="() => UpdateClient()">Update Client</button>
        </div>
    </div>
    <br />

    <div class="BanClients">
        <div>
            <h4>Ban Client</h4>
        </div>
        <div>
            <input type="text" @bind="banClientId" placeholder="Client ID" />
            <button @onclick="BanClient">Ban Client</button>
        </div>
    </div>
    <br />

    <div class="DisplayClient">
        <h4>Display Clients</h4>
        <div>
            <button @onclick="DisplayClients">Show Clients</button>
        </div>

        <div>
            <ul>
                @foreach (var c in clients)
                {
                    <li>@($"{c.ClientId} - {c.FirstName} {c.LastName} - {c.Phone} - {c.Email} - {c.Status}")</li>
                }
            </ul>
        </div>
    </div>
</div>

@code {
    public class Client
    {
        public string ClientId { get; set; }
        public string LastName { get; set; }
        public string FirstName { get; set; }
        public string Phone { get; set; }
        public string Email { get; set; }
        public string Status { get; set; } = "Active";
    }

    string directoryPath = @"C:\Users\mryla\Documents\FBE\cpsy200prototype\cpsy200prototype\Services";

    string filePath => Path.Combine(directoryPath, "data-samples.xlsx");
    private List<Client> clients = new();

    private Client newClient = new();
    private string updateClientId;
    private string updatePhone;
    private string updateEmail;
    private string banClientId;

    // Adds Client
    void AddClient(Client client)
    {
        if (string.IsNullOrWhiteSpace(newClient.ClientId)) return;

        if (!Directory.Exists(directoryPath))
        {
            Directory.CreateDirectory(directoryPath);
        }

        IWorkbook workbook;
        ISheet sheet;

        if (File.Exists(filePath))
        {
            using var fs = new FileStream(filePath, FileMode.Open, FileAccess.Read);
            workbook = new XSSFWorkbook(fs);
        }
        else
        {
            workbook = new XSSFWorkbook();
        }

        sheet = workbook.NumberOfSheets > 0 ? workbook.GetSheetAt(0) : workbook.CreateSheet("Clients");

        int lastRow = sheet.LastRowNum;
        IRow row = sheet.CreateRow(lastRow + 1);

        row.CreateCell(0).SetCellValue(client.ClientId);
        row.CreateCell(1).SetCellValue(client.LastName);
        row.CreateCell(2).SetCellValue(client.FirstName);
        row.CreateCell(3).SetCellValue(client.Phone);
        row.CreateCell(4).SetCellValue(client.Email);
        row.CreateCell(5).SetCellValue(client.Status);

        using var fsOut = new FileStream(filePath, FileMode.Create, FileAccess.Write);
        workbook.Write(fsOut);

        newClient = new();
    }

    // Able to Ban Client, though its usefulness isnt very useful
    void BanClient()
    {
        if (!File.Exists(filePath) || string.IsNullOrWhiteSpace(banClientId)) return;

        if (!Directory.Exists(directoryPath))
        {
            Directory.CreateDirectory(directoryPath);
        }

        using var fs = new FileStream(filePath, FileMode.Open, FileAccess.ReadWrite);
        var workbook = new XSSFWorkbook(fs);
        var sheet = workbook.GetSheetAt(0);

        for (int i = 0; i <= sheet.LastRowNum; i++)
        {
            var row = sheet.GetRow(i);
            if (row != null && row.GetCell(0)?.ToString() == banClientId)
            {
                row.GetCell(5).SetCellValue("Banned");
                break;
            }
        }
        using var outFile = new FileStream(filePath, FileMode.Create, FileAccess.Write);
        workbook.Write(outFile);

        banClientId = "";
    }

    // Update Client Information
    void UpdateClient()
    {
        if (!File.Exists(filePath) || string.IsNullOrWhiteSpace(updateClientId)) return;

        if (!Directory.Exists(directoryPath))
        {
            Directory.CreateDirectory(directoryPath);
        }

        using var fs = new FileStream(filePath, FileMode.Open, FileAccess.ReadWrite);
        var workbook = new XSSFWorkbook(fs);
        var sheet = workbook.GetSheetAt(0);

        for (int i = 0; i<= sheet.LastRowNum; i++)
        {
            var row = sheet.GetRow(i);
            if (row != null && row.GetCell(0)?.ToString() == updateClientId)
            {
                if (!string.IsNullOrWhiteSpace(updatePhone)) row.GetCell(3).SetCellValue(updatePhone);
                if (!string.IsNullOrWhiteSpace(updateEmail)) row.GetCell(4).SetCellValue(updateEmail);
                break;
            }
        }

        using var outFile = new FileStream(filePath, FileMode.Create, FileAccess.Write);
        workbook.Write(outFile);

        updateClientId = updatePhone = updateEmail = "";

    }

    // Display all Clients
    void DisplayClients()
    {
        clients.Clear();
        if (!File.Exists(filePath)) return;

        if (!Directory.Exists(directoryPath))
        {
            Directory.CreateDirectory(directoryPath);
        }

        using var fs = new FileStream(filePath, FileMode.Open, FileAccess.Read);
        var workbook = new XSSFWorkbook(fs);
        var sheet = workbook.GetSheetAt(0);

        for (int i = 0; i <= sheet.LastRowNum; i++)
        {
            var row = sheet.GetRow(i);
            var ClientId = row?.GetCell(0)?.ToString();

            if (!string.IsNullOrWhiteSpace(ClientId))
            {
                clients.Add(new Client
                    {
                        ClientId = row.GetCell(0)?.ToString(),
                        LastName = row.GetCell(1)?.ToString(),
                        FirstName = row.GetCell(2)?.ToString(),
                        Phone = row.GetCell(3)?.ToString(),
                        Email = row.GetCell(4)?.ToString(),
                        Status = row.GetCell(5)?.ToString()
                    });
            }
        }
    }
}
